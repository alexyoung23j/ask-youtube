// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Video {
  url           String        @id
  title         String
  length        Int
  transcription Json
  chatHistory   ChatHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatHistory {
  id       String    @id @default(cuid())
  video    Video     @relation(fields: [videoUrl], references: [url])
  videoUrl String
  messages Message[]
  user     User      @relation(fields: [userId], references: [id])
  userId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id              Int         @id @default(autoincrement())
  chatId          String
  chat            ChatHistory @relation(fields: [chatId], references: [id])
  sender          SenderType  @default(AI)
  content         String
  videoTimestamps String[]    @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SenderType {
  USER
  AI
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chats         ChatHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
